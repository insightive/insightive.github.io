[{"content":"windows 10 환경에서 작업.\nSSH 키를 생성해준다. GitHub-Generate new SSH key을 참고한다.\nPowerShell에서도 작업 가능하다.\n1 ssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; -f \u0026#34;.ssh/filename\u0026#34; ed25519는 암호화 알고리즘 중 하나이다. 보통 rsa알고리즘을 사용한다. 보통 C:\\Users\\username\\.ssh 디렉토리를 생성에 이 곳에 파일들을 저장한다.\n리눅스에서는 자동으로 /home/username/.ssh 디렉토리가 자동 생성되고 이 곳에 파일을 저장됐던 것 같다 설정한 디렉토리에 filename과 filename.pub 두 파일이 생성된다. filename이 private키 이고, filename.pub이 public키 이다. private 키, public 키 설명: 위키피디아: 공개키 암호방식 이미지 GitHub에 public키를 저장 Settings \u0026gt; SSH and GPG keys \u0026gt; SSH keys \u0026gt; New SSH key\n식별하기 위한 Title을 지정하고, public키 파일을 열어 내용을 복사 붙여넣기 한다. GitHub을 여러 계정 사용하는 경우 각 GitHub에 위의 과정을 각각 진행한다. 두 계정은 다른 키 파일들을 사용해야 한다. 같은 파일 사용하려 했지만 GitHub에 등록되지 않는다. GitHub에서 unique 검증을 하는 것이라고 추측중 ssh config 설정 C:\\Users\\username\\.ssh 디렉토리에 config 파일을 생성한다. 확장자는 없다 1 2 3 4 5 6 7 8 9 10 11 # Default GitHub username1 Host github.com HostName github.com IdentityFile ~./ssh/filename1 User git # username2 Host github.com-username2 HostName github.com IdentityFile C:\\Users\\username\\.ssh\\filename2 User git Host를 다르게 설정, 식별가능하게 함. HostName은 접속하려는 host를 작성. IdentityFile은 ssh 접속시 사용하는 private 파일을 설정. ssh config 설정을 기반으로 프로세스 이해 git remote나 git clone을 할 경우\nDefault로 설정한 git config의 Host 때문에 git@github.com:username1/repo.git로 remote/clone을 하면 된다. username2에서는 git config의 Host 때문에 git@github.com-username2:username2/repo.git로 remote/clone 하면 된다. 즉, remote/clone 시 사용하는 주소를 통해 -\u0026gt; ssh config 파일을 바탕으로 -\u0026gt; 접속 방법을 설정하게 된다.\n참고 사이트\nsonypark.log님의 블로그\n","date":"2022-06-17T16:24:29+09:00","permalink":"https://insightive.github.io/posts/github/ssh_github/","title":"ssh로 GitHub 연결하기"},{"content":"windows 10 환경에서 작업.\nHugo Hugo는 Static Site Generators 중 하나이고 Go lang으로 작성되어 있다. Hugo를 선택한 이유는 Go lang으로 되어 있기 때문이다.\n공식 사이트: Hugo\nHugo 설치 공식 설치 문서 Hugo install-Windows을 참고해서 설치를 진행한다.\n다운로드 저장소 Hugo Release에서 본인 pc 설정에 맞는 버전을 다운로드 한다.\n문서에는 특정 경로에 설치할 것을 추천하지만 어떤 경로든 상관 없을것 같다\n내가 선택한 theme이 extended 버전을 필요로하는 경우가 있다 가장 중요한 것은 환경 변수 설정을 해주는 것이다.\n문서 Hugo install-Windows-set-variables 참고한다. hugo 설치 확인 1 2 \u0026gt; hugo version hugo v0.100.2 GitHub, Git GitHub 가입 \u0026amp; repository 생성 GitHub 가입한다. GitHub Repository 2개 생성 username/blog: 블로그 프로젝트 소스코드가 저장될 저장소. username/username.github.io: 실제 블로그가 운영될 저장소. 이 저장소 기반으로 블로그가 운영된다. 이 저장소에 저장하는 것으로 블로그 배포된다고 볼 수 있음.\n\u0026lsquo;username.github.io\u0026rsquo; 저장소는 public으로 설정한다. private 저장소로 지정했었는데, 안 됐었던 경험이 있다. 이유는 접근권한이 private이라서 라고 추측하는 중. Git 설치 Git 공식 사이트: Git\ngit cli(command line interface)로 git을 명령어를 이용해서 git을 사용하게 해준다.\n본인 pc 설정에 맞는 버전 설치\nGit 설치 확인 1 2 \u0026gt; git version git version 2.31.1.windows.1 hugo blog 생성 Hugo quickstart를 참고한다.\nhugo로 블로그 사이트(프로젝트에 해당)를 생성한다. 1 \u0026gt; hugo new site blog blog로 작업디렉토리를 변경 후, git 로컬저장소로 초기화한다. 1 2 3 \u0026gt; cd blog \u0026gt; git init Initialized empty Git repository in C:/Users/blog/.git/ hugo-theme을 submodule로 추가 -\u0026gt; hugo theme을 clone 해오기 Hugo-themes에서 원하는 테마를 고른다. 고른 테마의 문서도 잘 읽어본다 theme을 submodule로 추가. 검색해보면 여러 방법이 있는데, Hugo 공식문서에서 추천한 방법 사용 1 git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack themes 디렉토리에 파일들이 생성된다.\n그리고 .gitmodules 파일이 생성되고, 여기에는 submodule의 정보를 가지고 있다. hugo theme을 clone 해오기 처음에는 submodule로 추가하려고 시도했지만, 블로그 운영하면서 불편한 점이 생겨 clone 방법으로 변경한다. submodule로 추가해 온 theme 내부를 변경할 때, 이 내용까지 remote repository에 저장하고 싶은데, 방법을 모르겠다.\n아직 submodule을 잘 사용하는 방법은 모르는 것 같다.\n1 git clone https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack 이렇게 clone 해오면 theme을 복사해오는 것과 같다.\nusername.github.io 저장소를 submodule로 추가 public 디렉토리를 먼저 삭제 한다. public으로 username.github.io 저장소를 클론해오는데 디렉토리가 이미 존재할 경우 정상 동작하지 않는다. username.github.io submodule 추가시에는 꼭 ssh 주소를 사용해야 한다. -\u0026gt; https로 클론할 경우 당장 에러가 발생하지 않지만, 블로그를 접속시 404에러가 발생한다. GitHub ssh 클론에 필요한 방법: ssh로 GitHub 연결 \u0026amp; 여러 계정 사용 username.github.io submodule은 main branch를 설정해서 submodule을 추가한다. (작업을 push 할 예정이므로 branch 설정) 1 git submodule add -b main git@github.com:username/username.github.io.git public remote repository가 빈 repository 라서, 에러가 발생한다. .gitmodules파일을 확인하면 submodule이 추가되지 않은 것을 확인할 수 있다. public 디렉토리로 이동하여 git remote -v로 원격 저장소(여기서는 username.github.io)로 remote를 확인할 수 있다. README.md 파일을 생성하고 add/commit/push 하여 빈 repository 상태를 벗어나게 해준다. 1 2 3 4 5 6 cd public git remote -v echo \u0026#34;# username.github.io\u0026#34; \u0026gt;\u0026gt; README.md git add README.md git commit -m \u0026#34;first commit\u0026#34; git push -u origin main 로컬 repository main 브랜치에서 remote repository origin 브랜치로 push 해준다. 즉 로컬에서 작업하는 브랜치는 main이 된다. 다시 blog 디렉토리로 돌아와 username.github.io를 submodule로 추가해준다. 1 2 cd .. git submodule add -b main git@github.com:username/username.github.io.git public .gitmodules파일을 확인하여 submodule이 추가된 것을 확인한다. GitHub blog remote repository 연결 repository를 생성하면 처음 나오는 Quick setup을 참고하자\nblog 디렉토리(프로젝트)에서 작업할 branch로 main을 설정해준다 1 git branch -M main 로컬 저장소 blog와 blog remote repository 연결해준다. 1 git remote add origin git@github.com:username/blog.git https 연결로 가능하지만 위에서 ssh 연결 설정을 이미 해두어 ssh로 연결해준다 포스팅할 글을 작성해준다. hugo quick-start 추천 방법 1 hugo new posts/my-first-post.md 보통 themes/내가-선택한-테마/exampleSite에 많은 예시 문서들이 있다. 이를 참고해서 문서 작성한다. GitHub에 올리기 전에 확인 1 hugo server -D build 후, GitHub으로 배포 build: 아래 명령을 실행하면 public에 파일들이 생성된다. 1 hugo -t themes-아래-테마이름 GitHub으로 배포: 먼저 submodule로 연결한 username.github.io로 add/commit/push를 해준다. 1 2 3 4 cd public git add . git commit -m \u0026#34;first build\u0026#34; git push origin main GitHub으로 배포: 소스코드를 원격 저장소 blog로 add/commit/push 해준다. 1 2 3 4 cd .. git add . git commit -m \u0026#34;first build\u0026#34; git push origin main username.github.io로 접속하여 확인 시간이 좀 걸릴 수 있으니 조금 여유를 가지고 확인하자.\n블로그를 구축하며\u0026hellip; 블로그를 구축하면서 GitHub에 대해 더 공부할 수 있는 시간이었다. 공식문서의 중요성을 다시 한번 느낄 수 있었다.-\u0026gt; 영어 공부 열심히 해서 공식문서 읽는데 어려움이 없게 하자. 남은 작업\nscripts로 배포 자동화하기 댓글 기능 추가하기 참고 사이트\nhttps://github.com/Integerous/Integerous.github.io#readme\n","date":"2022-06-16T17:20:29+09:00","permalink":"https://insightive.github.io/posts/blog/create_blog/","title":"Hugo + GitHub 블로그 구축"}]